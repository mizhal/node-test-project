QuestLog

=FOCO========
  Q#00016 FEAT Autenticacion y Autorizacion: Usuarios y Roles
    RAMA: feat-00016-autentificacion-y-autorizacion-usuarios-y-roles
    RESULTADOS:
      - No se va a permitir de momento la edición de roles, ya que están integrados directamente en el funcionamiento de la aplicación.
    TRACK:
      [DONE] Modelos de usuarios y roles
        [DONE] Encriptar la clave
          Junto con callbacks del modelo para realizar la encriptación al salvar o bien mediante getters y setters.
      [CANCELADO] UI de Usuarios y Roles
      [TODO] Filtrado de las tablas de roles y usuarios.
  Q#00018 FEAT Back: Datos Alumno
    RAMA: feat-0001-modulo-gestion-alumnos-grupos
    UNLOCK: Q#00030 FEAT Módulo de Combate / Back
    DESC:
      Crear el endpoint de datos de alumno, asegurando que asimismo tiene un Usuario subsidiario que autoriza al uso de la aplicación. 
    JOURNAL:
      En la rama de Git se ha mergeado el modelo/endpoint de Usuario y la migración asociada.
  [TODO] Unificar el estilo de nombrado de las tablas.
  Q#00038 FEAT Investigación: provisionar máquinas físicas con Vagrant
    DESC: 
      Para implementar el servidor local de la aplicación, es conveniente preparar una 
      Vagrantfile con todo lo necesario.
      Ver [001].
    OBJETIVOS:
      - Servidor de Gitolite.
      - NodeJS 0.12.0
      - Nginx como proxy inverso para la app de NodeJS
    REFERENCES:
      [001] Plugin: Vagrant managed servers 
        https://github.com/tknerr/vagrant-managed-servers
  Q#00034/1 SUB Implementación de ErrorRenderer
    UP: Q#00034
    DESC:
      ErrorRenderer es una clase que maneja el canvas y renderiza los errores.
      Tiene métodos para dibujar y redibujar los errores.
    JOURNAL:
      He implementado el renderer, ahora necesito formalizar las pruebas en Karma+Jasmine.
      El error de peticion no esperada lo causaba la clase ErrorRenderer al cargar la imagen en el nodo DOM IMG. Por alguna razón el plugin de traducciones lanza la peticion (me imagino que se dispare el "onload" de la página)
    TRACK:
      [DONE] Corregidos los tests de karma+jasmine para que pasen sin dar errores que no son.
      [DONE] Implementar el pintado de errores (mockeando los errores de momento)
      [DONE] Probar ErrorRenderer
      [FOCUS] Implementar y probar el Visor Editable (EditableCamera) 
        [FOCUS] Pruebas de creación de errores
      [TODO] Estudiar como hacer blitting con canvas.
        La técnica consiste en usar un buffer alternativo para dibujar y cuando termine cambiarlo al buffer principal para que no se vea el proceso de composición.
        Usar [001]
      [TODO] Estudiar como NO repintar todo el canvas cada vez que se mueve o se borra algo.
        Usar [002] y [003]
        La idea seria partir el canvas en una matriz para no tener que recalcular en cada momento que elementos hay que redibujar. Aunque molaria implementar un arbol de busqueda (Un Quadtree en 2D) para calcular las colisiones entre errores y repintar cada error y con todos los que colisiona.
    REFERENCES:
      [001] HTML5 Blitting Using an Offscreen Buffer
        http://retrogamecode.blogspot.com.es/2013/06/html-5-blitting-using-and-offscreen.html
      [002] HTML5 Canvas: You don’t always have to clear the entire thing
        http://atomicrobotdesign.com/blog/web-development/html5-canvas-you-dont-always-have-to-clear-the-entire-thing/
      [003] Use Quadtrees to detect collisions in 2D space 
        http://gamedevelopment.tutsplus.com/tutorials/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space--gamedev-374
      [004] What is the difference between pageX/Y clientX/Y screenX/Y in Javascript?
        http://stackoverflow.com/questions/9262741/what-is-the-difference-between-pagex-y-clientx-y-screenx-y-in-javascript
  Q#00041 FEAT  Deploy
    RAMA: feat-00041-deploy
    DESC:
      Implementación del deploy. Esta vez sobre la máquina fisica. La idea es usar Vagrant.
    REFERENCIAS:
      [001] How To Host Multiple Node.js Applications On a Single VPS with nginx, forever, and crontab
        https://www.digitalocean.com/community/tutorials/how-to-host-multiple-node-js-applications-on-a-single-vps-with-nginx-forever-and-crontab
  Q#00029 FEAT Implementación de Front / Landing y Dashboards
    RAMA: feat-00029-front-landing-dashboards
    DESC:
      Implementar la landing/página de login ya que ya está disponible el sistema de autentificacion.
      Para los Dashboards usar los roles, los profesores al Dashboard de profesor y los alumnos al de alumno.
      Mockear las tareas, entregas y reclamaciones de momento.
    TASKS:
      [DONE] Ficha de Jugador con datos mock
      [DONE] Calendario del jugador con datos mock
      [DONE] Log de Entregas con datos mock
      [DONE] Log de Tareas con datos mock
      [DONE] Enlazar editor desde el dash del alumno.
      [TODO] Validacion del formulario de login.
      [TODO] Tablón de Novedades o bien area de notificaciones.
      [TODO] Diseñar Dashboard del profesor.
  Q#00037 FEAT Soporte de pruebas de front
    RAMA: feat-00037-soporte-pruebas-front
    OBJETIVOS:
      OK Informe de cobertura
      - Informe de progreso
      - Informe en HTML en el navegador
    OBJETIVOSCUMPLIDOS:
      .
      .
    RESULTADOS:
      Hay informe de cobertura. Tener en cuenta al utilizarlo lo siguiente:
        - Se genera solo al reiniciar el modo continuo de Karma, no solo al cambiar los archivos.
        - Si esta activado, no salen los números de línea de los errores, asi que hay que desactivarlo cuando estas en depuración del código.
    DESC:
      Asi nos quitamos los problemas de antemano.
    REFS:
      [001] Can not load “IE”, it is not registered! error message on Karma
        http://stackoverflow.com/questions/19764243/can-not-load-ie-it-is-not-registered-error-message-on-karma
    TRACK:
      [DONE] Informe de cobertura
        [DONE] Instalar karma-coverage
    .
    .
  Q#00034 ENH Implementar el editor con CANVAS
    UP: Q#00031
    DESC:
      Una implementación alternativa que use canvas y que permita dibujar directamente sobre la lámina.
      Tiene la ventaja de que no es necesario andar replicando las transformaciones de Zoom y Pan para cada div de error independientemente, sino que las aplicamos directamente sobre todo el canvas
      Es necesario controlar como realizar eficientemente el borrado y la animación de los circulos.
      .
      .
    JOURNAL:
      - Otra dificultad que hay es la de colocar adecuadamente todos los manejadores de eventos en los objetos. Se puede solucionar con JQuery, la version del "on" que toma un selector padre y aplica el binding a todos los hijos.
      .
      .
    TASKS:
      [TODO] Sustituir en las factories y servicios las funciones de vectores 2D por la dependencia del modulo/clase Vector2D
      [TODO] Implementar un Quadtree para acelerar la busqueda de objetos en 2D al repintar
        [DONE] Corregir los metodos del QuadTree para que casen con los nuevos mencionados en el renderer de errores.
          [DONE] Actualizar karma-jasmine para que se puedan usar tests asincronos con done.
      [TODO] [Q#00034/1]
  Q#00031 FEAT Módulo de Combate / Front - EDITOR
    RAMA: feat-00031-combate-editor
    NEXTQUEST: Q#00030 FEAT Módulo de Combate / Back
    DESC:
      Implementar con datos mock, el editor de láminas (detección de errores).
    TASK:
      [DONE] Imagen con Zoom y Pan.
      [TODO] Directiva que permite marcación de errores.
        [TODO] Modelo1: Dibujo en el Viewport, imprimir en Canvas
          Se trata de mantener los errores en un quadtree, redibujar en cada cambio solo el
          rectangulo afectado. Mostrar el error en edicion de modo interactivo en el Viewport
          (como nodos del DOM), cuando se confirme, meter el error en el quadtree y luego 
          repitar el rectangulo asociado al nuevo error, repintando todos los errores que
          colisionen en esa parte de la lamina. 
      [TODO] Barra lateral basica funcional
        [TODO] Listado de Errores
        [TODO] Filtros y ordenacion.
    JOURNAL:
      Implementé el sistema de zoom y pan de manera manual y a tortas y me he dado cuenta de que existe un modelo subyacente que simplifica las cosas un huevo.
      La idea es que tenemos dos "objetos" gráficos:
        - el Viewport que recorta/proyecta lo que vemos en pantalla
        - el Mundo que contiene toda la lámina, incluyendo las partes no visibles.
      Para hacer  pan lo que debemos hacer es mover el Viewport sobre el Mundo. Esto es una traslación, que llamaremos "traslación del Viewport" o viewport.translation. Dado que Viewport se implementa como un DIV HTML fijado a la pantalla y realmente no se mueve, se aplicará la translacion inversa sobre el Mundo, es decir, movemos el mundo y no el visor.
      El zoom es un problema del Mundo y no del Viewport también en nuestro contexto. Aunque sería razonable pensar en escalar el Viewport, dado que el DIV HTML esta fijado a la pantalla y el tamaño de esta no cambia, debemos escalar el mundo.
      Escalar el Mundo da un pequeño problema, ya que se usan transformaciones CSS3 y estas realizan el escalado centrado en el Mundo. Para no perder el punto de Pan al hacer Zoom es necesario compensar el desplazamiento del origen. 
      Para ello consideramos tambien una "traslación del Mundo" donde acumularemos las diferentes traslaciones necesarias (aunque me imagino que esta traslacion es funcion del nivel de zoom y no es "historica").
      Esta trasformación del mundo está referenciada al Sistema de Referencia sin Escalar, por lo tanto despues de calcularla habrá que compensar la escala dividiendo por ella.
  Q#00035 FIX Preparar tests del front/angular con Karma
    RAMA: fix-00035-tests-de-front
    DESC: 
      El generador tiene dos fallos respecto de los tests de front:
        - no enlaza correctamente las dependencias en el archivo de configuración de karma,
        por lo que al usar nuevos módulos con angular fallan los tests.
        - Hay un problema con "angular-scenario", es necesario sacar los archivos poniendolos en el ignore de la configuración de Karma.
      .
      .
    JOURNAL:
      - La factory de la dependencia "socket" esta averiada, no funciona en Karma. Es necesario introducir directamente la dependencia en la invocación de la funcion "$controller", que toma las dependencias como parametros en un hash.
      .
      .
    TASKS:
      [TODO] Actualizar el fix en el generador
      [TODO] Cherrypickear los commits interesantes de la parte del editor y ponerlos en esta rama.
      [TODO] Incorporar el plugin de "coverage"
      [TODO] Mostrar el informe de tests con Karma en Chrome en modo continuo.
      .
      .
    REFERENCES: 
      [001] Karma tests not running Issue#251 / Github DaftMonk/generator-angular-fullstack
        https://github.com/DaftMonk/generator-angular-fullstack/issues/251
    .
    .
  Q#00028 FEAT Diseño
    Realizar unos esquemas de diseño en la libreta y con photoshop en lo posible.
    JOURNAL:
      #{1} Mon Jun 15 11:08:01 2015
        La idea para el Dashboard es presentar esta información en bloques horizontales dispuestos verticalmente:
          - Entregas pendientes: 
            Con nombre, deadline, enlace. 
            Normalmente solo hay una, la de la ronda en curso pero a veces se pueden superponer varias si se convocan rondas especiales.
          - Entregas corregidas:
            Con "nota" y botón de acción para reclamar.
          - Tareas pendientes:
            Son trabajos que quedan por corregir. Cada uno con su deadline.
          - Tareas completadas:
            Trabajos completados que el usuario puede volver a revisar antes de su entrega. Sólamente se muestran las completadas no entregadas.
      .
      .
    TRACK:
      [TODO] Dashboard Alumno
        [DONE] Planteamiento esquemático web (wireframe a mano)
        [DONE] PSD web
        [TODO] Añadir una sección de manual para el alumno
        [TODO] Planteamiento esquemático móvil
        [TODO] PSD móvil
      [TODO] Editor
        [DONE] Planteamiento esquemático web (wireframe a mano)
        [TODO] PSD web
          [DONE] Maqueta principal
          [TODO] Crear panel lateral de manejo de errores
            El que contiene las acciones de info, editar, borrar, reclamar, etc
            Info muestra un popup con el historial del error.
          [TODO] Crear Popups de interacción
            [TODO] Popup de entrada de categoría de un error (y comentario)
            [TODO] Popup de reclamación
          [TODO] Replantear el PAD
            Queda muy grande y un poco deslavazado.
        [DONE] Planteamiento esquemático movil (wireframe a mano)
        [TODO] PSD móvil
        [TODO] Maqueta en HTML (versión web)
      .
      .
    REFERENCIAS:
      [001] 50 Useful UI Design Free PSD Files
        http://graphicdesignjunction.com/2013/06/psd-files-for-ui-design/
      [002] 59 Free PSD UI Kits For Web & Mobile App
        http://bashooka.com/photoshop/free-psd-ui-kits-web-mobile-app/
      [003] Flat Style & IOS 7 Line Style UI Kit PSD
        http://www.graphicsfuel.com/2013/11/flat-style-ios-7-line-style-ui-kit-psd/
      [004] Flat UI Colors
        http://flatuicolors.com/
      [005] Sitio interesante con iconos planos
        http://www.flaticon.com/
      .
      .
=ACTIVAS=====
  Q#00042 FEAT Proveer server de producción
    RAMA: feat-00042-provisionar-server-produccion
    DESC: 
      Hay una máquina fisica y hay que provisionarla. Mucho no se sabe de ella.
    SUBQUESTS:
      Q#00038 FEAT Investigación: provisionar máquinas físicas con Vagrant
    TRACK:
      [DONE] Saber si el procesador es de 32 bits o 64.
      [DONE] Instalar Trusty
        [DONE] Generar USB
        [DONE] Instalación
          [DONE] Memtest
          [DONE] Instalación
        [DONE] Arranque estandar
          [TODO] Corregir resolucion del GRUB
            [DONE] Intentar acceder por SSH (192.168.2.17)
            [DONE] Editar /etc/default/grub
            [CANCEL] Seleccionar la resolución correcta
            [DONE] Arrancar en modo texto 
              Usar [004]
      [TODO] Provisionar con Vagrant [->Q#00038]
        [TODO] Crear un setup con varias máquinas para Vagrant, una con la virtual y otra con la fisica
          Usar info en [002] y [003]
          [TODO] Proporcionar un usuario adecuado para el provisionamiento de la máquina 
            Que seguramente requerira capacidades de root.
      [TODO] Autentificacion con claves publicas para el acceso al servidor.
    JOURNAL:
      - Tenemos Karmic Koala instalado, cuya temporada de soporte expiro en 2011.
      - Es conveniente instalar Trusty Tahir que es LTS (llega hasta abril de 2019).
      - Parece que el procesador es de 64.
      - He bajado la distro 
      - He instalado el programa para generar el usb.
      - No se puede instalar docker directamente para emular un entorno más moderno. Vale más instalar directamente trusty y de ahí p'alante.
      - El grub toma una resolucion que no le gusta al monitor. 
      - Para grub en este caso mejor modo texto.
    REFERENCIAS:
      [001] Datos del servidor en [27:3]
      [002] Vagrant: Multi Machine Setup
        http://docs.vagrantup.com/v2/multi-machine/index.html
      [003] Plugin: Vagrant managed servers 
        https://github.com/tknerr/vagrant-managed-servers
      [004] AskUbuntu: How do I boot into true text mode 
        http://askubuntu.com/questions/92276/how-do-i-boot-into-true-text-mode
      [005] Vagrant::Butcher “sudo: no tty present and no askpass program specified” when trying to “cat /etc/chef/client.pem”
        http://stackoverflow.com/questions/22467706/vagrantbutcher-sudo-no-tty-present-and-no-askpass-program-specified-when-tr
  Q#00040 CONTROL OPEN  Reorganizar el repositorio
    RAMA: production (1)
    RAMA: production-setup  (1.1)
    RAMA: production-authentication (2)
    RAMA: production-landing (3.1)
    RAMA: production-student-dashboard (3.2)
    RAMA: production-editor (4)
    RAMA: production-students-courses (5)
    RAMA: production-teacher-dashboard (6)
    DESC: 
      El orden de features ha sido 
        1. inicial
          1.1 setup tests y traslations
        2. usuarios-y-control-de-acceso
        3. landing-y-dashboard
        4. editor-combate
        5. alumnos-y-grupos
        6. dashboard-del-profesor

      Se pueden ver las dependencias en [26:1].
      Idealmente, sería necesario reorganizar el repo para que representara las dependencias.
      Ire cogiendo los commits con "cherry-pick" e integrandolos en ramas de producción.
  [TODO] Integrar Sikuli en el mapa de recursos.
    De http://www.sikuli.org/
  Q#00039 ENH Mejoras de la quest log
    RAMA: enh-00039-mejoras-de-la-quest-log
    DESC:
      Mejoras de la quest log
  Q#00027 FEAT  Crear máquina virtual y setup de producción
    RAMA: feat-00027-maquina-virtual-y-setup-de-produccion
  Q#00036 FEAT Hosting alternativo
    DESC:
      Preparar un hosting alternativo por si las moscas
  [TODO] Sustituir todos los border-radius por un mixin de less.
  Q#00010 FEAT Comun: Filtro y Sort (server side) en las tablas ui-grid/ngGrid
    RECURSOS:
      [001] Stack Overflow: Server-side paging+filtering+sorting for ng-grid with WebAPI
        http://stackoverflow.com/questions/17786091/server-side-pagingfilteringsorting-for-ng-grid-with-webapi
    TODO:
      [DONE] modificar la api para que el index acepte parametros y paginación.
        Se usa el parametro "filter" con query string que pa eso está
      [TODO] Integrar las funciones de ui-grid con la api paginada y filtrada.
        UI-grid/ngGrid tiene soporte explícito para filtrado y para paginación con el servidor.
  Q#002 - Integrar node-debug con grunt
    Intentar que todo vaya como la seda invocando "grunt serve:debug"
  Q#00003 FEAT UI de gestión de Datos Alumno
    RAMA: todavia no iniciado
    VISTAS:
      - Detalle del Alumno
      - Listado de Alumnos (sin cursos)
      - Creación y Edición de Alumno
    .
    .
=SUGERENCIAS=
  Explorar MEAN.js
    http://meanjs.org/
  Explorar AngularUI
    https://angular-ui.github.io/
  Explorar node-postgres
    https://github.com/brianc/node-postgres
=BLOQUEADAS==
  Q#00030 FEAT Módulo de Combate / Back
    RAMA: feat-00030-combate-back
    LOCK: Q#00018 FEAT Back: Datos Alumno
    DESC:
      He visto que puedo implementar el modulo de combate solo con dependencia del modulo de usuarios.
      Conviene implementarlo para hacer la vista de editor que ya está diseñada.
    TRACK:
      [TODO] Crear las tablas con un correcto orden de dependencias.
    RESULTADOS:
      - Orden encontrado:
          -1. Curso
          0. CategoriaDeError
          1. Ronda (belongs-to Usuario as retador, belongs-to Curso as retados)
          2. Reparto (belongs-to Ronda)
          3. Entrega (belongs-to Usuario)
          3. Tarea (belongs-to Reparto, belongs-to Entrega)
          4. Error (belongs-to Tarea, belongs-to CategoriaDeError)
          5. Reclamacion (belongs-to Error)
=COMPLETAS===
  [DONE] Extraer el Diario a un submodulo con el origin en el Libro Negro con todos los demás repos locales.
  [DONE] Evitar que se envien las relaciones mediante json
    La extensión virtual fields permite tratar las relaciones como atributos normales, incluso filtrarlos con "attributes"
  [DONE] Subsumir el endpoint de roles en usuarios.
  Q#003 - Incorporar MULTER al Generador
    JOURNAL:
    TASKS:
      [DONE] Añadir la librería a la plantilla del package.json
      [DONE] Modificar express.js para instalar el middleware
    .
    .
  Q#00014 FEAT Integrar sequelize
    [DONE] Script de preparacion de la base de datos
      1. Conectar y crear el usuario y la bd de proyecto directamente con el plugin de postgresql.
      2. Después hacer la conexion "estándar" con Sequelize y lanzar migraciones o sincronizar las tablas.
    [DONE] Scripts de creación del usuario inicial y de la base de datos
    [DONE] Integrar sequelize con la app (conectar, sincronizar tablas, etc) 
      Se han modificado los controladores y modelos. 
    [DONE] Actualizar el generador.
    [DONE] Preparar el sistema de migraciones.
      Ya está implementado.
    [DONE] Ver si se pueden lanzar migraciones con comandos SQL raw.
  Q#00004 FEAT Modulo de Traducciones (lib + back + front)
    :FECHA_FIN: 26/05/2015
    Integrar angular-translate
    AngularJS tiene soporte para traduccion de fechas y moneda a través de filtros, pero no para traducción de claves.
    No parece haber muchas más opciones.
      [DONE] Crear una vista Grid con todas las traducciones (index de admin) y conectarla con el servicio web usando componentes de angular ui.
      [DONE] Creación y edicion de traducciones
        [DONE] vista de creación y comprobación de que funciona.
        [DONE] vista de edición

  [DONE] cambiar el router por uiRoute

  Q#001 FEAT Subir archivos en los modelos que llevan archivos adjuntos
    Explorar el mecanismo de subida de archivos e implementar la subida desde el cliente con el modelo de alumnos que tiene una foto/icono asociada.
      [DONE] Usar multer para subida de archivos
        BRANCH: feat#0002/instalar-multer
      [DONE] Experimentar la manera de gestionar la creacion:
        Alternativas:
          1. Subida en dos fases
            - primero archivo, retornar ID asociar la ID al registro.
            - segundo datos JSON, lleva la ID del archivo asociado.
          2. Formulario
            - enviar los datos de alumno como campos de formulario (urlencoded)
            - enviar el archivo como otro campo más del formulario
      
        RESULT: Se puede hacer "facil" enviando los campos como elementos de formulario. bodyParser los parsea adecuadamente. Luego para vincular los archivos que están en req.files se debería usar otro método attach (por ejemplo) con algun tipo de plugin para Sequelize/Mongoose.
      [DONE] Implementar una rutina para gestionar los archivos adjuntos usando las callbacks de ciclo de vida del modelo
        Es necesario pasar como opciones los campos y el path de destino donde quedarán los archivos
  Q#0001 ALT Plugin de gestión de adjuntos para mongoose.
    Mongoose soporta plugins de manera sencilla, como se puede ver en http://mongoosejs.com/docs/plugins.html
    El mecanismo del plugin consistiría en:
      - mover el archivo temporal a un archivo definitivo SI NO FALLA LA VALIDACIÓN
      - nombrar en el archivo definitivo de tal manera que se vincule con el modelo, campo e id asociado
      - borrar el archivo (O NO SEGUN LAS CONDICIONES DE BORRADO LOGICO) al destruir el objeto dueño.
=FALLIDAS====
=REGISTRO====
  Q#001 - Subir archivos en los modelos que llevan archivos adjuntos
    Explorar el mecanismo de subida de archivos e implementar la subida desde el cliente con el modelo de alumnos que tiene una foto/icono asociada.