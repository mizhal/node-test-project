JOURNAL

[START Journal entry #{1}, Fri May 22 09:07:58 2015]

feat#001/1 - Subir archivos en los modelos que llevan archivos adjuntos -> COMPLETADO

He implementado la subida y almacenamiento de archivos con NodeJS. Detalles a tener en cuenta son que se usa el middleware multer, y que es necesario enviar los datos adjuntos como valores de formulario, no mediante JSON, para poder hacer la subida de archivos como multipart.

Otros detalles relevantes son que el directorio de subida de los archivos temporales es configurable en multer y que si no existe, es creado al iniciar el servidor.

Para el correcto archivamiento de los ficheros subidos he implementado una extensión de mongoose que aprovecha las callbacks del ciclo de vida para organizar los ficheros y mantener cierta vinculación entre los datos de la base de datos y el "Archivo" en el sistema de archivos. En particular, se invoca una función attach que copia los datos del archivo temporal al objeto de datos. Si el proceso de "save" no falla (o la validación) otra callback after_save realiza la copia y renombrado del fichero subido al "ARCHIVO". El nombre del fichero junto con la jerarquia de directorios dentro del Archivo vinculan el fichero con el objeto dueño del mismo.

Cuando el objeto es destruido, la callback asociada mueve todos los ficheros asociados a una "papelera de reciclaje" dentro del ARCHIVO.

Una mejora interesante sería eliminar el archivo temporal cuando falle la validación del objeto o este no se salve definitivamente por otra razón.

[END Journal Entry #{1}]

[START Journal entry #{2}, Fri May 22 09:18:17 2015]
	
feat#001/2 - UI de gestión de Datos Alumno

Debería hacer dos cosas antes: cambiar el router a UIRoute e integrar el módulo de traducciones.

[END Journal Entry #{2}]

[START Journal entry #{3}, Fri May 22 09:56:59 2015]

He cambiado el router de angular por UI route, parece que no hay problemas de momento.

[END Journal Entry #{3}]

[START Journal entry #{4}, Fri May 22 10:12:09 2015]

Para las traducciones voy a usar la librería "angular-translate" y "angular-translate-loader-url". La segunda es una extensión que permite cargar las traducciones desde una url. En concreto asi se puede redirigir a una url del propio servidor donde están las traducciones cargadas en la base de datos. Es algo que habrá que cachear por razones de rendimiento pero en principio es un requisito que las traducciones sean editables a través de la propia aplicación.

[END Journal Entry #{4}]

[START Journal entry #{5}, Fri May 22 10:32:35 2015]

También conviene agregar la extensión para cargar archivos estáticos "angular-translate-loader-static-files"

[END Journal Entry #{5}]

[START Journal entry #{6}, Fri May 22 11:37:30 2015]

Mejor aun es usar el partial Loader que permite cargar solo las traducciones del partial. El modulo se llama "angular-translate-loader-partial"

[END Journal Entry #{6}]

