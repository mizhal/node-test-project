QuestLog

FOCO========
  [TODO] Reorganizar el repo. Extraer los cambios al ORM y a las migraciones a su propia rama. 
  #00024 FEAT  Integrar completamente el soporte de migraciones
    DESC:
      Debe facilitarse lo siguiente:
        1. Varias ordenes en cada migración:
          Las migraciones son asincronas también, tenerlo en cuenta.
        2. Cargar modelos
        3. Creación y destrucción de las base de datos por comandos.
    TRACK:
      [DONE] Garantizar la secuencialidad.
      [DONE] Modificar app para tener acceso al singleton del ORM.
      [DONE] Modificar el singleton del ORM para poder cargar modelos desde el contexto compartido.
      [TODO] Integrar el script de creacion de la base de datos.
      [TODO] Integrar el script de destrucción de la base de datos.
      .
      .
    JOURNAL:
      .
      .
    RESULTS:
      La solución para cargar modelos es importar la app (teniendo en cuenta que estás en el directorio de migraciones), en la app, dejar el singleton de Sequelize en la propiedad "orm" y preparar en el singleton de sequelize un método para obtener un modelo ("getModel")
      La solución para ejecutar varias operaciones asíncronas es usar la librería de promesas e invocar las funciones dentro DE UN ARRAY con el método .all. El ARRAY es necesario para que se ejecuten en secuencia y no en paralelo.
    .
    .
  #00023 FEAT  Setup de relaciones con sequelize
    JOURNAL:
      Sequelize presenta un problema de dependencias ya que parece pensado para definir todos los modelos en un solo archivo.
      Para solucionar este problema se aplica inyección de dependencias, almacenando todos los modelos definidos en un contexto global y luego ejecutando una función que define las relaciones en una segunda fase cuando ya están definidos todos los modelos.
    DESC:
      Probar y garantizar que todo está integrado en las relaciones entre modelos con sequelize.
      Implica detallar y documentar como se realizan las migraciones, que nombres llevan los campos de relacion, como realizar relaciones HABTM, nombres de las tablas intermedias...
    TASK:
      [TODO] Modificar el singleton de sequelize y la app para que creen las relaciones después de tener evaluados todos los modelos.

  #00022 ENH Emular la consola de rails mediante un REPL
    JOURNAL:
      He construido una pipeline con promesas dentro de una función. Ahora estoy retornando esa pipeline pero los datos no pasan.
      Ya está el REPL, ahora el problema es eliminar las dependencias circulares.
    REFERENCIAS:
      [001] Build Your Own App Specific REPL For Your NodeJS App
        http://derickbailey.com/2014/07/02/build-your-own-app-specific-repl-for-your-nodejs-app/

  #00016:02 Preparar la configuración de Passport para Autentificacion
    UP: #00016 FEAT Autenticacion y Autorizacion: Usuarios y Roles 
    REFERENCIAS:
      [001] Passport-LocalAPIKey
        https://github.com/cholalabs/passport-localapikey
      [002] Documentación de Passport
        http://passportjs.org/
      [003] passport-local, librería que ya está instalada 
        https://github.com/jaredhanson/passport-local
      [004] Autenticación basada en token con AngularJS y NodeJS 
        http://code.tutsplus.com/es/tutorials/token-based-authentication-with-angularjs-nodejs--cms-22543
    Aprender a usar la estrategia local de passport para autentificar usuarios con el modelo local "Usuario"
    JOURNAL:
      El endpoint /api/usuarios/me ya funciona. Envia el login, ultimo_acceso, y "puede_entrar".
      Ha sido necesario añadir el rol provisionalmente para que funcione la parte de front de angular que venía con el generador.
    TRACK:
      [DONE] Migración para crear el usuario admin
      [DONE] Corregir la estrategia local que viene incluida para usar el modelo Usuario en lugar de User
        [DONE] Regenerar el token encriptado en el servidor.
      [TODO] Añadir el campo "nombre_completo" a usuario. 
        Este campo debe sincronizarse/desnormalizarse luego desde DatosAlumno y/o DatosProfesor. 
      [TODO] Añadir roles.
        Se está enviando "hardcoded" el valor role="user" en /api/usuarios/me. Hay que sustituirlo por un verdadero sistema de roles.
    .
    .
  #00016:01 Buscar un módulo de Autorizacion
    DESC:
      Al igual que es posible usar "passport" como middleware para autentificar a los usuarios en nuestra API, se debe buscar una librería que permita hacer lo mismo para autorización, es decir, determinar el acceso de cada endpoint y cada acción en función de los roles.    
    UP: #00016 FEAT Autenticacion y Autorizacion: Usuarios y Roles
    REFERENCIAS:
      [001] MustBe: Authorization Plumbing For NodeJS / Express Apps
        http://derickbailey.com/2014/11/30/mustbe-authorization-plumbing-for-nodejs-express-apps/
    JOURNAL:
      1: El modulo "MustBe" parece interesante, debo estudiarlo para ver si es una alternativa razonable.
    .
    .
  #00018 FEAT Back: Datos Alumno
    Crear el endpoint de datos de alumno, asegurando que asimismo tiene un Usuario subsidiario que autoriza al uso de la aplicación.
      .
      .
    RAMA: feat#0001/modulo-gestion-alumnos-grupos
      .
      .
    JOURNAL
      En la rama de Git se ha mergeado el modelo/endpoint de Usuario y la migración asociada.
    .
    .
ACTIVAS=====
  #00021 ENH OPEN  Mejorar la estructura de los requires
    Con algo que no requiera enlaces simbolicos que no van a ser muy compatibles en windows.
    .
    .
  #00020 ENH  Mejorar el soporte a migraciones con sequelize-migration-pg-extras
    https://www.npmjs.com/package/sequelize-migration-pg-extras
    Tiene cosas como comandos para el script de creación de la base de datos y la destrucción.
    .
    .
  #00010 FEAT Comun: Filtro y Sort (server side) en las tablas ui-grid/ngGrid
    RECURSOS:
      [001] Stack Overflow: Server-side paging+filtering+sorting for ng-grid with WebAPI
        http://stackoverflow.com/questions/17786091/server-side-pagingfilteringsorting-for-ng-grid-with-webapi

    [DONE] modificar la api para que el index acepte parametros y paginación.
      Se usa el parametro "filter" con query string que pa eso está
    [TODO] Integrar las funciones de ui-grid con la api paginada y filtrada.
      UI-grid/ngGrid tiene soporte explícito para filtrado y para paginación con el servidor.
    .
    .
  #00019 ENH Integrar node-debug con grunt 
    Intentar que todo vaya como la seda invocando "grunt serve:debug"
    .
    .
  #00003 FEAT UI de gestión de Datos Alumno
    RAMA: todavia no iniciado
    Vistas:
      - Detalle del Alumno
      - Listado de Alumnos (sin cursos)
      - Creación y Edición de Alumno
    .
    .
SUGERENCIAS=
	Explorar MEAN.js
		http://meanjs.org/
	Explorar AngularUI
		https://angular-ui.github.io/
	Explorar node-postgres
		https://github.com/brianc/node-postgres
BLOQUEADAS==
  #00016 FEAT Autenticacion y Autorizacion: Usuarios y Roles
    RAMA: feat#00016/autentificacion-y-autorizacion-usuarios-y-roles
    SUBMISIONES:
      #00016:01 Buscar un módulo de Autorizacion
      #00016:02 Preparar la configuración de Passport para Autentificacion
    REFERENCIAS:
      [001] REST Security Cheat Sheet
        https://www.owasp.org/index.php/REST_Security_Cheat_Sheet
      .
      .
    TRACK:
      [TODO] Modelos de usuarios y roles
        [DONE] Encriptar la clave
          Para encriptar la clave lo más problable será que use este módulo:
            [001] Password-Hash
              https://www.npmjs.com/package/password-hash
          Parece ser que no, que ese modulo está deprecado. Mejor usar bcrypt o scrypt.
          Ambos tienen dependencias chungas, como Python o OpenSSL. En realidad en máquinas unix esto no es muy importante.

          Junto con callbacks del modelo para realizar la encriptación al salvar o bien mediante getters y setters.
        [TODO] UI de login (basica)
          Mirar la referencia [001] REST Security Cheat Sheet
          IMPORTANTE: Ya hay instalado un middleware de AUTENTIFICACION: passport 
          Ahora es necesario buscar un middleware de AUTORIZACION o algo que la facilite.
          El flujo de login es:
            form(user, pass) --> auth endpoint
            auth endpoint --> Usuario.validate(user, pass)
              then:
                generate atoken
                store_session(atoken) 
                send_to_client(ok, atoken)

              catch:
                send_to_client(err)

            En el cliente:
              establecer el atoken en una cookie, debe enviarse siempre.
            Subsecuentes llamadas:
              un middleware requiere el atoken para determinar la info del usuario.
    .
    .
COMPLETAS===
  #003 - Incorporar MULTER al Generador
    JOURNAL:
    TASKS:
      [DONE] Añadir la librería a la plantilla del package.json
      [DONE] Modificar express.js para instalar el middleware
    .
    .
  #00014 FEAT Integrar sequelize
    [DONE] Script de preparacion de la base de datos
      1. Conectar y crear el usuario y la bd de proyecto directamente con el plugin de postgresql.
      2. Después hacer la conexion "estándar" con Sequelize y lanzar migraciones o sincronizar las tablas.
    [DONE] Scripts de creación del usuario inicial y de la base de datos
    [DONE] Integrar sequelize con la app (conectar, sincronizar tablas, etc) 
      Se han modificado los controladores y modelos. 
    [DONE] Actualizar el generador.
    [DONE] Preparar el sistema de migraciones.
      Ya está implementado.
    [DONE] Ver si se pueden lanzar migraciones con comandos SQL raw.
  #00004  FEAT  OPEN  Modulo de Traducciones (lib + back + front)
    :FECHA_FIN: 26/05/2015
    Integrar angular-translate
    AngularJS tiene soporte para traduccion de fechas y moneda a través de filtros, pero no para traducción de claves.
    No parece haber muchas más opciones.
      [DONE] Crear una vista Grid con todas las traducciones (index de admin) y conectarla con el servicio web usando componentes de angular ui.
      [DONE] Creación y edicion de traducciones
        [DONE] vista de creación y comprobación de que funciona.
        [DONE] vista de edición

	[done] cambiar el router por uiRoute
	feat#001 - Subir archivos en los modelos que llevan archivos adjuntos
		Explorar el mecanismo de subida de archivos e implementar la subida desde el cliente con el modelo de alumnos que tiene una foto/icono asociada.
			[DONE] Usar multer para subida de archivos
				BRANCH: feat#0002/instalar-multer
			[DONE] Experimentar la manera de gestionar la creacion:
				Alternativas:
					1. Subida en dos fases
						- primero archivo, retornar ID asociar la ID al registro.
						- segundo datos JSON, lleva la ID del archivo asociado.
					2. Formulario
						- enviar los datos de alumno como campos de formulario (urlencoded)
						- enviar el archivo como otro campo más del formulario
			
				RESULT: Se puede hacer "facil" enviando los campos como elementos de formulario. bodyParser los parsea adecuadamente. Luego para vincular los archivos que están en req.files se debería usar otro método attach (por ejemplo) con algun tipo de plugin para Sequelize/Mongoose.
			[DONE] Implementar una rutina para gestionar los archivos adjuntos usando las callbacks de ciclo de vida del modelo
				Es necesario pasar como opciones los campos y el path de destino donde quedarán los archivos
	ALT#0001 Plugin de gestión de adjuntos para mongoose.
		Mongoose soporta plugins de manera sencilla, como se puede ver en http://mongoosejs.com/docs/plugins.html
		El mecanismo del plugin consistiría en:
			- mover el archivo temporal a un archivo definitivo SI NO FALLA LA VALIDACIÓN
			- nombrar en el archivo definitivo de tal manera que se vincule con el modelo, campo e id asociado
			- borrar el archivo (O NO SEGUN LAS CONDICIONES DE BORRADO LOGICO) al destruir el objeto dueño.
FALLIDAS====