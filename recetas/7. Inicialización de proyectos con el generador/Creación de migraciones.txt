Creación de migraciones

Para crear nuevas migraciones se usa el comando:

  sequelize migration:create --name nombre-de-la-migracion

Esto creará un nuevo archivo en el directorio "db/migrations" llamado:

  20150529135553-nombre-de-la-migracion.js

La primera parte del nombre es una marca de tiempo e identifica unívocamente a la migración. La segunda parte es el nombre descriptivo que hemos puesto en el comando de creación. Por estética, si usamos algún separador de palabras en el nombre descriptivo, conviene que sea un "-" ya que sequelize pone un guión separando el nombre descriptivo y la marca de tiempo.

Una vez creado, debemos editar el archivo con comandos que modifiquen la base de datos.
El archivo contiene dos funciones vacias a editar, llamadas "up" y "down". La función "up" debe contener los comandos que "avanzan" la versión del esquema de la base de datos, es decir, que llevan de una versión del esquema a otra más actual.
La función "down" contiene los comandos que llevan de una versión más actual a una más antigua.
Los comandos pueden consistir en creación de tablas, modificación de datos, conversiones y cualquier cosa que se pueda escribir en javascript.

También podemos escribir las migraciones como SQL puro.
Para ello, debemos localizar el "driver" de la base de datos entre los parámetros que recibe la migración.
En la versión de las librerías que estamos utilizando con nuestro generador, el driver se localiza en:

  var db = queryInterface.sequelize;

Con esta variable "db" ya podemos hacer consultar directas a la base de datos. Aquí va un ejemplo de la creación de un tabla en postgresql:

  db.query('create table "DatosAlumno"(    \
    id integer primary key not null,       \
    nombre varchar(20) not null,           \
    codigo_uo varchar(10) not null,        \
    estado integer not null,               \
    foto varchar(255),                     \
    usuario_id integer not null references "Usuarios"(id) on delete set null,\
    "createdAt" timestamp with time zone,                         \
    "updatedAt" timestamp with time zone                         \
    )');

Este método puede ser útil pero no es recomendable a largo plazo ya que se pierde la posibilidad de cambiar de motor de base de datos (por ejemplo de postgresql a mysql) con un mínimo de cambios en el código, ya que el SQL que soporta cada base de datos tiene ligeras diferencias.